<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Express Jukebox</title>

  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css" integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous">
  <link href="/css/application.css" rel="stylesheet">

  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>

  <script src="/socket.io/socket.io.js"></script>
  <script src="/js/application.js"></script>
</head>
<body>
  <main class="container-fluid p-4">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item active" aria-current="page">Home</li>
      </ol>
    </nav>

    <h2 class="mb-3">Welcome to the Jukebox</h2>

    <nav class="d-flex justify-content-center" aria-label="Page navigation example">
      <ul class="mx-auto pagination">
        <li class="page-item">
          <a class="page-link" href="#" aria-label="Previous" data-dir="prev">
            <span aria-hidden="true">&laquo;</span>
            <span class="sr-only">Previous</span>
          </a>
        </li>
        <li class="page-item">
          <a class="page-link" href="#" aria-label="Next" data-dir="next">
            <span aria-hidden="true">&raquo;</span>
            <span class="sr-only">Next</span>
          </a>
        </li>
      </ul>
    </nav>

    <ul class="list-group list-group-flush cards my-4" id="cardList"></ul>

    <h4>Add new card</h4>
    <form action="/api/v1/cards" method="POST" class="mb-3" id="frmNewCard">
      <div class="form">
        <div class="form-group">
          <label for="number">ID</label>
          <input type="text" class="form-control" name="number" id="cardNumber" placeholder="Enter card ID">
        </div>

        <div class="form-group">
          <label for="label">Label</label>
          <input type="text" class="form-control" name="label" id="cardLabel" placeholder="A short label identifying the card">
        </div>

        <div class="form-group">
          <label for="uri">URI</label>
          <input type="text" class="form-control" name="uri" id="cardURI" placeholder="Paste a URI to play here, or search Spotify below">
        </div>

        <div class="form-group">
          <label for="spotifySearchString">Search Spotify</label>
          <input type="text" class="form-control" name="q" id="spotifySearchString">
        </div>

        <div class="form-check">
          <input type="checkbox" name="shuffle" id="cardShuffle">
          <label for="shuffle">Shuffle?</label>
        </div>

        <div class="form-check">
          <input type="checkbox" name="repeat" id="cardRepeat">
          <label for="repeat">Repeat?</label>
        </div>

        <input type="submit" class="btn btn-primary" value="Add card" id="createCard">
      </div>
    </form>

    <div class="d-flex flex-column w-100" id="spotifyResults"></div>

    <script type="text/javascript">
      $(() => {
        // init page
        var socket = io()
        socket.on('cardAdded', addCard)
        socket.on('cardUpdated', updateCard)
        socket.on('cardDeleted', removeCard)

        initSpotifySearch()

        $("#frmNewCard").submit(() => {
          createCard({
            number: $("#cardNumber").val(),
            label: $("#cardLabel").val(),
            uri: $("#cardURI").val(),
            shuffle: document.getElementById("cardShuffle").checked ? true : false,
            repeat: document.getElementById("cardRepeat").checked ? true : false
          })

          document.getElementById("frmNewCard").reset()
          return false
        })

        $(".page-link").click((e) => {
          e.preventDefault()

          if (e.target.dataset.dir === "next") {
            let nextPage = page() + 1
            history.pushState(null, null, `/cards?page=${nextPage}`)

            getCards()
          } else if (e.target.dataset.dir === "prev") {
            let prevPage = page() - 1
            if (prevPage > 0) {
              history.pushState(null, null, `/cards?page=${prevPage}`)

              getCards()
            }
          }
        })

        window.addEventListener('popstate', (e) => {
          getCards()
        })

        getCards()
        // done init page
      })

      function getCards() {
        clearCardList()
        cardList().append(loader())

        let queryStr = `?page=${page()}`
        fetch('/api/v1/cards' + queryStr).then((response) => {
          return response.json()
        }).then((data) => {
          clearCardList()
          data.forEach(appendCard)
        })
      }

      function page() {
        let urlParams = new URLSearchParams(window.location.search)

        return parseInt(urlParams.get('page')) || 1
      }

      function clearCardList() {
        while (cardList().firstChild) {
          cardList().removeChild(cardList().firstChild)
        }
      }

      function cardList() {
        return document.getElementById('cardList')
      }

      function removeCard(cardId) {
        $("#card" + cardId).remove()
      }

      function createCard(card) {
        return fetch('/api/v1/cards', {
          method: "POST",
          headers: {
            "Content-Type": "application/json; charset=utf-8",
          },
          body: JSON.stringify(card)
        }).then((response) => {
          console.log(response.json())
        })
      }

      function appendCard(card) {
        var cardItem = buildCardItem(card)

        cardList().append(cardItem)
      }

      function addCard(card) {
        var cardItem = buildCardItem(card)

        cardList().prepend(cardItem)
        cardList().removeChild(cardList().lastChild)
      }

      function updateCard(card) {
        var oldCardItem = document.getElementById('card' + card.number)
        if (oldCardItem) {
          // change in place - a simple fix that will respect future pagination
          // or filtering
          var newCardItem = buildCardItem(card)

          oldCardItem.parentNode.replaceChild(newCardItem, oldCardItem)
        } else {
          // NOTE once pagination/filtering is in place, this will lead to some
          // odd behaviour.
          addCard(card)
        }
      }

      function deleteCard(cardId) {
        return fetch('/api/v1/cards/' + cardId, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json; charset=utf-8",
          },
        }).then((response) => {
          console.log(response.json())
        })
      }

      function scanCard(cardId) {
        return fetch('/api/v1/cards/' + cardId, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json; charset=utf-8",
          },
        }).then((response) => {
          console.log(response.json())
        })
      }
    </script>
  </main>
</body>
</html>
